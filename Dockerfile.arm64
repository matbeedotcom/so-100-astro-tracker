# Dockerfile for ARM64 (Raspberry Pi 5)
FROM arm64v8/ros:humble-ros-base-jammy

# Fix GPG keys and install build tools
RUN apt-get update --allow-insecure-repositories && \
    apt-get install -y --allow-unauthenticated ca-certificates gnupg && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 && \
    apt-get update && apt-get install -y \
    python3-pip \
    python3-colcon-common-extensions \
    python3-rosdep \
    python3-vcstool \
    git \
    wget \
    curl \
    nano \
    htop \
    usbutils \
    software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# Install ARM-specific tools
RUN apt-get update && apt-get install -y \
    i2c-tools \
    python3-smbus \
    && rm -rf /var/lib/apt/lists/* \
    || true

# Install ROS packages for ARM
RUN apt-get update && apt-get install -y \
    ros-humble-desktop \
    ros-humble-moveit \
    ros-humble-ros2-control \
    ros-humble-ros2-controllers \
    ros-humble-controller-manager \
    ros-humble-joint-state-broadcaster \
    ros-humble-joint-trajectory-controller \
    ros-humble-position-controllers \
    ros-humble-xacro \
    ros-humble-robot-state-publisher \
    ros-humble-tf2-ros \
    ros-humble-rmw-cyclonedds-cpp \
    && rm -rf /var/lib/apt/lists/*

# Install Python packages for star tracker
RUN pip3 install --upgrade pip && \
    pip3 install \
        ament-package \
        astropy \
        skyfield \
        pyephem \
        opencv-python \
        numpy \
        ephem \
        jplephem \
        sgp4 \
        adafruit-circuitpython-gps \
        adafruit-circuitpython-bno055 \
        sysv_ipc \
        python3-ament-package \
    || echo "Some packages may not be available for ARM64"

# Create workspace
WORKDIR /ros2_ws

# Copy the packages
COPY so_100_arm /ros2_ws/src/so_100_arm
COPY star_tracker /ros2_ws/src/star_tracker

# Clone hardware interface package (if needed for physical robot)
RUN cd /ros2_ws/src && \
    git clone https://github.com/matbeedotcom/so_arm_100_hardware.git || true
    
# Copy hardware config for so_arm_100_hardware
COPY config/hardware_config.yaml /ros2_ws/src/so_arm_100_hardware/config/hardware_config.yaml

# Initialize rosdep and install dependencies
RUN /bin/bash -c "source /opt/ros/humble/setup.bash && \
    rosdep update && \
    rosdep install -i --from-path src --rosdistro humble -y --skip-keys 'gazebo_ros gazebo_ros_pkgs gazebo_ros2_control gz_ros2_control' || true"

# Build the workspace
RUN /bin/bash -c "source /opt/ros/humble/setup.bash && \
    colcon build"

# Copy config files
COPY config /ros2_ws/config

# Setup entrypoint
RUN echo '#!/bin/bash' > /entrypoint.sh && \
    echo 'set -e' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Source ROS2' >> /entrypoint.sh && \
    echo 'source /opt/ros/humble/setup.bash' >> /entrypoint.sh && \
    echo 'source /ros2_ws/install/setup.bash' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Export ROS domain ID' >> /entrypoint.sh && \
    echo 'export ROS_DOMAIN_ID=${ROS_DOMAIN_ID:-0}' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Execute command' >> /entrypoint.sh && \
    echo 'exec "$@"' >> /entrypoint.sh

RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]